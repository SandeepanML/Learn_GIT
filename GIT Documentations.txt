-----------------------------------    Day 1 ----------------------------------------

git config user.name
git config user.email

clear

git init --> This command initializes the git repository in your local machine..
got status --> Report backs the status of your local repository..

1) Upon creating a GIT repository with git init you will create a hidden .git file..
2) The .git file is a hidden file that manages the versioning of the files inside the git repository..
3) Upon creating a GIT repository, all the folders/directories inside the top level GIT repositories will also be a part
   of that Repository, meaning all the changes are tracked..

cd c:\\Users\\write\\Desktop

git init

.gitignore : you can use ".gitignore" to mention the files it should not track.


--> While accessing Private Repositories:
1) Create PAT on GitHub
2) then git clone

--> GitHub Desktop Tool Gui
PAT : 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

git clone https://github.com/SandeepanML/my-second-repo.git
git clone https://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@github.com/SandeepanML/my-private-repo.git


-----------------------------------    Day 2 ----------------------------------------
----------------------------------- add, commit, push, pull, fetch and etc-----------

From just "Repository" we will need to break it down to "Working Directory", "Staging Area", "Repository"..

--> git add (Changing code in a Repository)

--> git commit -m "code update" (Commiting these changes) ## We can think of these as "Commits" where we have informed GIT about specific changes to files.

--> git push and git pull (Pushing and Pulling Changes)

--> git status, git log, git diff (Checking Status, Logs and Changes)

--> git add .
--> git add file1.txt file2.txt subfolder\file3.txt

Once added the files will move to the STAGING area..

--> git commit -m "Message on the files which you are committing.."

--> git log

git log command will show a list of all the commits made to a repository, including the hash, message, and metadata.
You can think of it as the History of repo

We can check for remote branches with the command :
--> git remote -v

If you this command on a cloned repo: you will view the URL of the report branch, like the GitHub url. But if you wont have a link then you wont see a URL.

We will git we want to add a remote branch using the git remote command syntax : 
--> git remote add name https://url.git
OR
--> git remote add origin https://url.git (More Preferred Command)

By Convention, we call this remote branch the ORIGIN branch

--> git remote add origin https://url.git

** Origin is only by convention..You can technically replace it any name you want.

You then replace the .git URL with the .git URL from the repository you have created.

In case you want to rename the Origin to something else:

--> git remote rename <old> <new>
--> git remote remove <name>

Once we have connected to our remote branch on GitHub, we can **push** our code to the remote branch..

We tell git to push to the remote main/master branch called origin with the command:

--> git push -u origin main/master              -------------- "-u" means UPSTREAM 

Push an existing repository from the command line:

--> git remote add origin http//---.git
--> git branch -M main
--> git push -u origin main

If you have not connected your local repository to your GitHub folder the following command wont work, else it will list the ".git" web location:

--> git remote -v

To add a remote git location:

--> git remote add origin https://github.com/SandeepanML/Learn_GIT.git
 
There are 2 options of getting repository changes from a remote branch..

--> git pull
--> git fetch

												
	git add			                git commit			git push			
												
												
	Working Directory			Staging Area			Local repository(.git file)			Remote Repository		
										

        git pull							        git fetch (into .git)


git pull ==> git fetch + git merge 

Using **git fetch** will download the changes from the GITHUB remote repository, how ever you will not see those changes be part of the files you have in the working directory.

Fetch allows you to grab additional work done on the remote master branch, without needing to merge it in your working directory files..

Using **git fetch** makes sense when you are working with other and want to see what changes they have made but are not ready to over write your own files yet.

When using fetch, often you will just use:
--> git fetch

But you can specify to fetch specific branches using :

--> git fetch <remote> <branch>
--> git fetch origin <branch> 

Using **git pull** makes sense when you want to directly grab changes from the remote branch and directly merge them into your current branch.

This means you will literally update the files in your working directory to match up and merge with the remote branch..

Actual code to see the changes in GITHUB:

git fetch
git checkout origin/master (if you have committed you changes in master branch in GITHUB)

git switch master (you will not see the latest updated file in your GITHUB account)

git pull


-----------------------------------    Day 3 ----------------------------------------
----------------------------------- Working with Branches ---------------------------

Some topics

* Master/Main branch and Branches
* Understanding HEAD
* Git Branches Commands:
	git branch
	git switch
	git checkout
* Delete or Rename Branch
* Merging branches and conflict
* Using git diff

Branches :

-> Branches are just POINTERS to commits.
-> When you create a branch, all GIT needs to do is create a new pointer, it doesn't change the repository in any other way.
-> upon creating a new repo with **git init** you create a new branch called the master branch (in git) or main branch (in GitHub).
-> Master vs Main = As we have discussed previously, GitHub has changed the nomenclature for this initial branch to be main branch while Git is still using master branch.
-> We need to learn about HEAD..
-> HEAD will help us understand what are we "viewing" or where we are "located" in regards to branches and commits.

-> When viewing the most recent commit using "git log", you may see: commit 06hdi (HEAD-> master)
-> HEAD always points to most recent commit.

-> A HEAD is simply a reference to a commit object.
-> We can think of HEAD as pointing to a "specific commit" in a branch that we are currently viewing..

--> git branch <branch_name> : Create a new branch
--> git branch : Report Branches
--> git switch : Switch Branches

--> git branch : Reports back all the branches you have under the working directory
--> git branch new_branch : Creates a new branch 
--> git switch branch_name : Now HEAD will point out to you in the "current branch"

Renaming a Branch:

--> git switch branch_to_rename
--> git branch -m new_name
	** You must be checked out on the branch you will rename.

Deleting a Branch:

--> git branch -d branch_to_delete_name 

	** You cannot delete a branch you are checkout at
	** You will also get a warning if the branch is not merged.
		** You can confirm you want to do this anyways with -D
 

Merging Branches and Conflicts

"FAST FORWARD" merge

--> git switch master
--> git merge new_branch (new_branch where there are new commits which are not in master branch)

Usually 3 cases with Merge:

-> Fast Forward Merge.
-> Multiple Branch Commit Merge with No Conflict.
-> Multiple Branch Commit Merge with a Conflict.

What is Auto Commit: 

When you are merging 2 branches, then there are some commits which one of the branch is ahead and then git auto commits that at the time of Mergining
Git will create a commit for you. It will also request for you  to name the commit, with a default name of "Merge branch "branch_name""

1) Git creates the new commit for us, and will attempt the merge.

2) Sometimes there are no conflicts for examples:
	a) The branch only focused on files not in the receiving branch, thus the merge simply adds the new files to the to the receiving branch.

3) There will be some instances where there are "conflicts", for example changes in the file on lines that are different between the branches.
4) These are known as merge conflicts, and we need to resolve the conflicts between the branches in order to merge them.

5) Git will warn you about files in conflict 
6) then you will need to edit the files in order to remove the conflicts:
	- Git also provides specialized markdown to indicate the differences between the files and what differences come from which branch.
	- Modern editors have syntax highlighting to reflect this.

7) When you create a new branch it always points out to last COMMIT.

To merge switch to the main branch:
git switch master
git merge new_branch

Following is the example of Fast Forward Merge.
""""
git merge new_branch
Updating e609701..ef293ad
Fast-forward
 myfile.txt | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)
""""

When there is a conflict in merging..

<<<<<<< HEAD
Master line added on line 4
=======
Buggy QA code, dont use
>>>>>>> buggy
		
Checking Differences with GIT DIFF

diff --git a/newfile.txt b/newfile.txt
index a9e2707..4d08aab 100644
--- a/newfile.txt
+++ b/newfile.txt
@@ -1,3 +1,4 @@
 One Line
 Two Line
-Three Line
\ No newline at end of file
+New Line
+Uncommited new Three Line
\ No newline at end of file


Perform the following tasks:
1) Create a new repository
2) Create a text file with the numbers 1-3 written out in english (one,two, three).
3) Add and Commit these Updates
4) Create a new branch called translation
5) Switch to the new branch and translate the numbers to another language(uno, dos, tres).
							
Bonus Task:
1) Can you figure out how to use git diff to view the differences between the two branches before a merge?
2) Merge the translation branch back to your initial master branch, it should be a “fast forward” merge since there were no other commits on master.

-----------------------------------    Day 4 ----------------------------------------
----------------------------------- Undoing Changes ---------------------------		

Mainly to Discuss on 4 commands:

1) git checkout and DETACHED HEAD
2) git restore
3) git reset
4) git revert



						
				

												





 












